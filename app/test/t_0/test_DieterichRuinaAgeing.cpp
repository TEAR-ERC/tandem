// test/t_0/DieterichRuinaAgeingTest.cpp
#include "localoperator/DieterichRuinaAgeing.h"

#include <array>
#include <iostream>
#include <vector>




namespace tndm {

std::pair<double, double> run_DieterichRuinaAgeing(double V0, double b, double f0, double a, double eta, double L, double sn_pre, double tau_pre, double Vinit, double Sinit, double sn, double tau, double psi) {
    DieterichRuinaAgeing dra;
    dra.set_num_nodes(100);

    DieterichRuinaAgeing::ConstantParams cp = {
        .V0 = V0,
        .b = b,
        .f0 = f0
    };
    dra.set_constant_params(cp);


    DieterichRuinaAgeing::Params test_param =  {
            .a = a,
            .eta = eta,
            .L = L,
            .sn_pre = sn_pre,
            .tau_pre = {tau_pre},
            .Vinit = {Vinit},
            .Sinit = {Sinit}
        };
    dra.set_params(0, test_param);

    std::array<double, DieterichRuinaAgeing::TangentialComponents> tau_v = {tau};

    auto slip_rate = dra.slip_rate(0, sn, tau_v, psi);
    double state_rhs = dra.state_rhs(0, norm(slip_rate), psi);

    // Compare the calculated results with the expected results
    return {slip_rate[0], state_rhs};
        
    
}

} // namespace tndm

int main(int argc, char* argv[]) {
    
    std::pair<double, double> res;
    double presion = 1.0e-2;
    double V0 = 1.0e-6;
    double f0 = 0.6;
    double sn_pre = 0.0;
    double tau_pre = 0.0;
    double Sinit = 0.0;
	std::vector<double> b_Vec = {0.00355176, 0.00468991, 0.00314423, 0.0024674, 0.00423568, 0.00303038, 0.00303191, 0.00177284, 0.00268919, 0.00369035, 0.00430089, 0.00115216, 0.00451361, 0.00466799, 0.0016228, 0.0032875, 0.00101073, 0.00104923, 0.00464797, 0.00323632, 0.00328343, 0.00168266, 0.00405868, 0.00122671, 0.00356763, 0.00172064, 0.00257496, 0.00363993, 0.00222494, 0.0028816, 0.00490996, 0.0035606, 0.00414724, 0.00427988, 0.00151731, 0.00189203, 0.00298074, 0.00229626, 0.00168257, 0.0042195, 0.0023277, 0.00416553, 0.00148527, 0.00498592, 0.00314102, 0.00247276, 0.00450904, 0.00366253, 0.00356974, 0.00136774, 0.00359602, 0.00135551, 0.00308258, 0.00261347, 0.00151578, 0.00427072, 0.00332036, 0.00293129, 0.00278893, 0.0021999, 0.00114571, 0.00120538, 0.00189277, 0.00439503, 0.00153691, 0.00463565, 0.00430013, 0.00492674, 0.00389439, 0.00318915, 0.00380164, 0.00220027, 0.00407387, 0.00236325, 0.00480713, 0.00492846, 0.00341368, 0.0045858, 0.00286495, 0.00291805, 0.00130121, 0.00266867, 0.00311101, 0.00319271, 0.00281379, 0.00248121, 0.0041309, 0.00429819, 0.0012446, 0.00340567, 0.00361425, 0.00131528, 0.00292062, 0.00462484, 0.0042622, 0.00173271, 0.00473478, 0.00203203, 0.00103371, 0.00434788};
	std::vector<double> a_Vec = {0.00450871, 0.00314228, 0.00299603, 0.00258291, 0.00431081, 0.00334583, 0.00145274, 0.00417593, 0.00192694, 0.00385963, 0.00150183, 0.00240007, 0.00204876, 0.00491282, 0.00489174, 0.00171956, 0.00345052, 0.00117623, 0.00145002, 0.00267665, 0.00104573, 0.00342033, 0.00266794, 0.0024472, 0.00494115, 0.00214744, 0.00160351, 0.00338015, 0.00361825, 0.00273819, 0.00386707, 0.00487869, 0.0020123, 0.0017864, 0.00354236, 0.00187022, 0.00492887, 0.00130409, 0.00157357, 0.00313501, 0.0020764, 0.00156083, 0.00271831, 0.00386124, 0.00441905, 0.00359704, 0.00246767, 0.00350093, 0.00301629, 0.00197957, 0.00335333, 0.00457525, 0.00172059, 0.00477554, 0.00384088, 0.00163448, 0.00215205, 0.00148589, 0.00196182, 0.00321627, 0.00126759, 0.00388322, 0.004138, 0.00288957, 0.00123326, 0.00391152, 0.00152271, 0.00427547, 0.00134692, 0.00222968, 0.00302598, 0.00428957, 0.00191054, 0.00180959, 0.0036342, 0.00465681, 0.00367767, 0.00339917, 0.00499264, 0.00234811, 0.0028476, 0.0020886, 0.00357693, 0.00283458, 0.00113837, 0.00145523, 0.00273325, 0.00316, 0.00387348, 0.0049869, 0.0018118, 0.00329004, 0.00498494, 0.00120259, 0.00120643, 0.00402661, 0.00447083, 0.00264155, 0.00245641, 0.0027615};
	std::vector<double> eta_Vec = {4.37357, 3.85015, 7.04956, 5.30811, 4.05699, 2.47367, 3.7837, 6.02681, 3.13185, 2.27599, 2.4161, 4.47023, 4.07927, 4.83847, 2.96836, 3.44211, 3.2276, 5.31766, 5.39493, 5.80123, 3.97757, 4.23373, 3.8436, 3.96263, 3.67809, 3.96619, 5.75094, 3.86228, 4.76134, 5.15476, 3.79519, 2.46489, 2.41906, 5.32219, 2.82017, 4.27847, 4.14306, 3.37606, 4.03694, 5.85207, 3.96272, 3.01126, 6.0718, 2.77012, 3.25976, 3.13439, 4.05666, 5.34547, 3.23766, 2.53377, 4.20629, 4.44838, 4.29589, 3.72158, 6.15681, 5.3643, 4.18219, 6.35574, 4.79726, 4.54189, 3.82379, 5.10815, 4.48075, 5.03624, 4.69599, 2.52385, 3.00594, 3.87938, 3.4672, 4.3987, 6.30631, 2.52878, 4.2209, 2.37691, 2.95322, 3.7794, 5.09816, 5.51257, 3.90544, 5.45105, 3.3515, 4.36944, 5.43355, 5.02919, 2.38706, 5.32104, 5.76714, 4.20466, 2.79401, 6.02039, 4.20302, 5.36998, 3.68514, 2.73377, 6.28194, 3.29456, 3.13132, 3.80148, 3.97743, 4.46881};
	std::vector<double> L_Vec = {0.155508, 0.123124, 0.341195, 0.842267, 0.473095, 0.533259, 0.324512, 0.341648, 0.645219, 0.697248, 0.796811, 0.0363557, 0.592126, 0.916909, 0.991215, 0.981231, 0.549621, 0.552146, 0.14249, 0.440044, 0.269912, 0.330009, 0.0771809, 0.13492, 0.745413, 0.281555, 0.666865, 0.765433, 0.548584, 0.851859, 0.0868369, 0.501241, 0.615462, 0.217102, 0.161194, 0.243846, 0.125641, 0.275774, 0.261235, 0.445278, 0.649611, 0.148724, 0.151618, 0.105735, 0.1123, 0.56847, 0.348833, 0.418708, 0.827418, 0.226903, 0.748322, 0.910295, 0.644262, 0.721502, 0.981299, 0.360415, 0.916339, 0.00266431, 0.737893, 0.140399, 0.0208697, 0.980426, 0.265257, 0.668884, 0.0871061, 0.45011, 0.617692, 0.513963, 0.80138, 0.651565, 0.507482, 0.0174244, 0.377126, 0.593805, 0.0585154, 0.408066, 0.82201, 0.170986, 0.578722, 0.535095, 0.111811, 0.935164, 0.226471, 0.328421, 0.581748, 0.56578, 0.506131, 0.382483, 0.389366, 0.294313, 0.464673, 0.347363, 0.380773, 0.486049, 0.798735, 0.311635, 0.573104, 0.48671, 0.533079, 0.307304};
	std::vector<double> Vinit_Vec = {3.39808e-09, 1.76266e-09, 2.88198e-09, 2.49588e-09, 2.54369e-09, 1.13729e-09, 3.32427e-09, 1.12445e-09, 1.61778e-09, 3.80593e-09, 1.74467e-09, 2.35919e-09, 2.52307e-09, 2.6987e-09, 3.85361e-09, 2.70671e-09, 1.05567e-09, 2.57205e-09, 1.05174e-09, 1.98692e-09, 1.81547e-09, 2.36463e-09, 1.53403e-09, 1.10237e-09, 3.72351e-09, 1.2376e-09, 2.19139e-09, 2.53677e-09, 3.06174e-09, 1.07597e-09, 1.29857e-09, 1.71923e-09, 3.72509e-09, 3.54122e-09, 2.11839e-09, 3.63174e-09, 3.22465e-09, 2.85456e-09, 3.55881e-09, 3.85304e-09, 1.65909e-09, 1.89493e-09, 1.06238e-09, 2.1097e-09, 2.98842e-09, 1.01542e-09, 3.54951e-09, 1.5471e-09, 3.34679e-09, 1.13274e-09, 2.33449e-09, 1.2185e-09, 2.70278e-09, 2.95567e-09, 2.96625e-09, 2.03723e-09, 1.46506e-09, 1.15965e-09, 2.52394e-09, 3.63811e-09, 3.46846e-09, 2.84638e-09, 2.19972e-09, 2.01961e-09, 3.23719e-09, 3.81542e-09, 2.60404e-09, 1.5657e-09, 3.51415e-09, 1.63956e-09, 2.26783e-09, 2.39326e-09, 3.45637e-09, 1.98538e-09, 3.8598e-09, 1.34258e-09, 1.29183e-09, 2.96359e-09, 1.5819e-09, 3.54425e-09, 3.90856e-09, 2.17926e-09, 3.72482e-09, 2.01167e-09, 1.78986e-09, 2.58363e-09, 2.71053e-09, 3.22421e-09, 2.9198e-09, 3.13592e-09, 3.43342e-09, 1.58835e-09, 2.04067e-09, 2.48578e-09, 3.05386e-09, 1.10806e-09, 1.18778e-09, 3.80413e-09, 1.49309e-09, 3.09154e-09};
	std::vector<double> sn_Vec = {-22.3732, -1.73815, -7.091, -13.4327, -21.7783, -11.6385, -25.64, -22.4396, -21.8434, -6.05389, -27.1563, -20.991, -6.79734, -18.2493, -19.7238, -28.5596, -4.34172, -3.60897, -14.9121, -2.31143, -29.8884, -28.0977, -11.2744, -16.9176, -2.11967, -26.0726, -2.49015, -5.13068, -23.577, -16.2589, -22.0844, -22.0246, -12.5468, -9.61289, -4.02307, -12.0681, -2.4481, -9.40285, -17.2208, -24.2363, -25.3006, -6.57176, -15.2081, -24.7082, -22.8083, -22.8709, -29.3371, -11.0482, -17.9556, -20.6389, -16.5452, -14.6045, -17.1564, -7.33793, -14.1361, -14.2751, -29.3981, -17.1258, -26.8821, -29.3796, -6.84673, -17.9211, -22.3747, -8.82927, -22.0281, -21.4761, -18.4222, -23.5206, -16.9752, -12.8459, -4.04712, -10.9984, -15.511, -7.6603, -11.3454, -14.4944, -14.0755, -20.0642, -6.04206, -9.41928, -22.8813, -21.4989, -17.8747, -20.6973, -3.74158, -4.11175, -18.1925, -5.07833, -23.1114, -6.21082, -22.9679, -3.94078, -4.09121, -12.7909, -14.0271, -3.42122, -27.6779, -24.2062, -15.2253, -11.3248};
	std::vector<double> tau_Vec = {-3.32667, 9.42394, 3.73149, -5.96077, -1.20967, 9.49273, 2.62744, -2.34877, -6.92273, -4.84695, 1.87049, 5.69695, 6.36518, -4.27397, 4.90687, -7.05498, 9.65156, 6.251, -8.39904, -9.88633, 0.695087, -1.56508, 8.9712, -5.28595, 8.38673, -4.97623, -5.62744, -8.60936, -6.23365, 0.824485, -1.59614, 0.477195, 0.207971, 8.06497, -2.13338, 3.60653, 3.1621, 1.99395, 3.53007, -2.7526, 5.6627, -6.33194, 4.34662, 8.26998, 1.15359, 9.10037, 7.7057, 7.98157, -2.84269, -1.74536, -1.15687, -1.45987, 9.98113, 9.10937, 6.98038, -8.91583, 9.59722, -3.483, -2.38033, 8.22249, -4.71867, 3.56102, 5.57458, 6.96002, -5.48616, 6.0075, -3.87932, -4.91981, 9.92399, -0.752807, -3.62592, 0.161191, 2.03847, 8.64764, -7.89467, -9.16728, -8.53606, 0.635869, 1.47014, -8.63048, -2.97424, 1.66832, 9.36084, -1.099, 1.41089, 9.89809, -3.75524, 9.78486, 1.60874, -7.08597, -5.3106, 3.76721, 1.8874, -3.87703, -0.338762, 5.09328, 4.13467, -1.56895, 7.52167, 7.77692};
	std::vector<double> psi_Vec = {0.614211, 0.647797, 0.432578, 0.400213, 0.574492, 0.664585, 0.611099, 0.454547, 0.697839, 0.569493, 0.565275, 0.471164, 0.620532, 0.604322, 0.433619, 0.512105, 0.521934, 0.681118, 0.676816, 0.683188, 0.402143, 0.624374, 0.601009, 0.50228, 0.403417, 0.697105, 0.420864, 0.468894, 0.48755, 0.593376, 0.445971, 0.629684, 0.612471, 0.462134, 0.599411, 0.516412, 0.638517, 0.447624, 0.494093, 0.402394, 0.502244, 0.589463, 0.572651, 0.623907, 0.483066, 0.625738, 0.452271, 0.514434, 0.4688, 0.564713, 0.439506, 0.511256, 0.569424, 0.564441, 0.617035, 0.488465, 0.472065, 0.560137, 0.552457, 0.575459, 0.581849, 0.488445, 0.508559, 0.488787, 0.48031, 0.617111, 0.572529, 0.648651, 0.586492, 0.465421, 0.529537, 0.6694, 0.532895, 0.625807, 0.502787, 0.599699, 0.675556, 0.537362, 0.487197, 0.418127, 0.481669, 0.614048, 0.658248, 0.536598, 0.676325, 0.511051, 0.419516, 0.692703, 0.577403, 0.557237, 0.400687, 0.514926, 0.619078, 0.417649, 0.608789, 0.694262, 0.405082, 0.649677, 0.514426, 0.465871};
	std::vector<double> slip_rate_Vec = {1.4436699999999998e-51, -2.13456, -0.0609966, 0.0407891, 5.22934e-59, -0.503978, -8.86207e-159, 4.1022e-43, 1.41171e-92, 0.480504, -2.83924e-150, -7.12182e-43, -0.481701, 1.9099499999999997e-39, -3.8881100000000004e-23, 1.12592e-73, -2.2204, -0.70251, 9.57461e-41, 1.41687, -4.44092e-164, 6.20986e-79, -0.46893, 2.0510300000000002e-40, -2.00638, 4.14642e-109, 0.786865, 1.54223, 1.64051e-33, -8.50528e-93, 1.07573e-48, -7.4993e-61, -2.4779e-135, -0.637523, 3.35292e-15, -3.00857e-57, -0.348764, -3.55177e-85, -1.61986e-86, 9.76034e-47, -5.81927e-65, 0.770142, -1.4875099999999999e-52, -2.96521e-39, -3.1331599999999997e-49, -3.1040400000000002e-34, -4.26349e-40, -0.337784, 1.9768199999999997e-51, 4.58502e-112, 1.3633700000000002e-54, 9.09446e-46, -0.00111289, -1.20297, -1.16261e-20, 0.307241, -4.12707e-36, 5.32602e-111, 2.0084299999999999e-109, -1.22052e-46, 0.164928, -3.9431e-39, -5.9424e-34, -0.459028, 3.65113e-88, -3.47353e-44, 5.8529e-110, 2.2822199999999998e-51, -2.48635e-07, 5.76046e-86, 0.211322, -5.13403e-73, -5.4836499999999997e-98, -1.53825, 0.556961, 0.0010719, 6.9033e-15, -2.47153e-71, -6.10418e-28, 0.805577, 2.31105e-60, -2.84134e-118, -4.6009e-23, 8.3501e-81, -6.880910000000001e-121, -1.44932, 1.38011e-40, -1.4364, -1.16412e-63, 0.534281, 2.38709e-47, -0.293255, -1.80666e-20, 4.32435e-48, 3.47236e-217, -0.76835, -1.45132e-31, 6.97501e-103, -2.47284e-10, -0.468289};
	std::vector<double> state_rhs_Vec = {4.17841e-10, -0.0813074, 1229090000000000.0, 4.28371e+26, 3.69326e-06, -0.00286398, 2.40261e-10, 2.22235e+27, 6.59689e-25, -0.00252258, 1.73233e-05, 1.15939e+41, -0.00367188, 2.01711e-09, 5.51116e+35, 1369.12, 6.429e+24, -0.00133496, 2.16751e-15, -0.0104204, 1.80033e+18, 2.60922e-15, -0.0246594, 3.5863e+26, 4077630000000000.0, 1.89011e-33, 6.30868e+21, 20892900.0, 36107000000000.0, 3.3701e-08, 2379380.0, 1.70147e-12, 3.33098e-10, 1925540.0, 1.38821e-08, 119247000000.0, -0.0082742, 5.4887e+20, 1.39641e+19, 2067010000000.0, 6212320000.0, -0.0215702, 0.972844, 3.90072e-10, 411759000.0, 1.31265e-13, 2188580.0, 122.471, 39511100.0, 965.618, 116072000000.0, 4.0335e+19, 9.18673e-05, -0.00141984, 2.03279e-14, 2604.86, 196196000.0, 0.88626, 0.0956761, 0.0010959, 0.407726, 1.9166700000000002e+31, 6832750000000.0, 641.328, 1.17007e+26, 2.56901e-10, 4.14153e-06, 4.93232e-13, 1.54753e-07, 10388100000.0, 0.838128, 2.5296e-21, 0.1539, -0.00612201, 49.7487, -1.29332e-05, -2.76544e-17, 0.0229345, 622729000.0, 6.38075e+18, 3.63148e+31, 1.47654e-11, 1.01509e-16, 4.09367, 8.01888e-21, 16256000.0, 77019700000.0, -0.0161417, 0.24527, -0.00289725, 6929240000000000.0, 4.66514e+19, 1.11678e-11, 1264730000.0, 6.78756e-10, -0.00427208, 6248920000.0, 1.0079900000000001e-19, 1.73801e+27, 353473.0};
    for (std::size_t i = 0; i < b_Vec.size(); ++i) {
        res = tndm::run_DieterichRuinaAgeing(V0, b_Vec[i], f0, a_Vec[i], eta_Vec[i], L_Vec[i], sn_pre, tau_pre, Vinit_Vec[i], Sinit, sn_Vec[i], tau_Vec[i], psi_Vec[i]);
        if (std::abs(slip_rate_Vec[i] - res.first) > std::abs(slip_rate_Vec[i] * presion) || std::abs(state_rhs_Vec[i] - res.second) > std::abs(state_rhs_Vec[i] * presion)) {
            std::cout << "Error: " << i << std::endl;
            std::cout << "with params:" << std::endl;
            std::cout << "b = " << b_Vec[i] << std::endl;
            std::cout << "a = " << a_Vec[i] << std::endl;
            std::cout << "eta = " << eta_Vec[i] << std::endl;
            std::cout << "L = " << L_Vec[i] << std::endl;
            std::cout << "sn_pre = " << sn_pre << std::endl;
            std::cout << "tau_pre = " << tau_pre << std::endl;
            std::cout << "Vinit = " << Vinit_Vec[i] << std::endl;
            std::cout << "Sinit = " << Sinit << std::endl;
            std::cout << "sn = " << sn_Vec[i] << std::endl;
            std::cout << "tau = " << tau_Vec[i] << std::endl;
            std::cout << "psi = " << psi_Vec[i] << std::endl;
            std::cout << "Expected: " << slip_rate_Vec[i] << " " << state_rhs_Vec[i] << std::endl;
            std::cout << "Got: " << res.first << " " << res.second << std::endl;
            std::cout << "Requierd precision: " << presion << std::endl;
            std::cout << "Difference: " << std::abs(slip_rate_Vec[i] - res.first) << " " << std::abs(state_rhs_Vec[i] - res.second) << std::endl;
            return -1;
        }
    }
    return 0;
}