name: tandem-build

on:
  push:
    branches:
      - '**'

permissions:
  contents: read
  packages: write
  actions: read
  id-token: write
  checks: write



jobs: 
  check-petsc-version:
    runs-on: ubuntu-24.04
    outputs:
      petsc_version: ${{ steps.get-current-version.outputs.version }}
      needs_rebuild: ${{ steps.check-version.outputs.rebuild }}
      dependencies_image: ${{ steps.check-version.outputs.dependencies_image }}
      tandem_image: ${{ steps.check-version.outputs.tandem_image }}
    steps:
      - name: Get Current PETSc Version
        id: get-current-version
        run: |
          VERSION=3.22.0
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
      - name: Check if versioned image exists
        id: check-version
        run: |
          IMAGE_TAG=${{ steps.get-current-version.outputs.version }}
          # Convert repository to lowercase
          REPO_NAME=${{ github.repository }}
          REPO_NAME_LOWER=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
          TANDEM_IMAGE="ghcr.io/${REPO_NAME_LOWER}/tandem-build"
          DEPENDENCIES_IMAGE="ghcr.io/${REPO_NAME_LOWER}/tandem-dependencies"
          DEPENDENCIES_IMAGE_GHCR_NAME="${REPO_NAME_LOWER}/tandem-dependencies"
          echo "dependencies_image=${DEPENDENCIES_IMAGE}" >> $GITHUB_OUTPUT
          echo "tandem_image=${TANDEM_IMAGE}" >> $GITHUB_OUTPUT
          # Check if the image exists using GHCR API
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
            "https://ghcr.io/v2/${DEPENDENCIES_IMAGE_GHCR_NAME}/manifests/${IMAGE_TAG}")
          echo "https://ghcr.io/v2/${DEPENDENCIES_IMAGE_GHCR_NAME}/manifests/${IMAGE_TAG}"
          echo $STATUS_CODE
          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "rebuild=false" >> $GITHUB_OUTPUT
          else
            echo "rebuild=true" >> $GITHUB_OUTPUT
          fi

  build-dependencies-image:
    needs: check-petsc-version
    if: needs.check-petsc-version.outputs.needs_rebuild == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Check if image exists
        id: check-image
        run: |
          IMAGE_URL="${{ needs.check-petsc-version.outputs.dependencies_image }}:${{ needs.check-petsc-version.outputs.petsc_version }}"
          if docker manifest inspect $IMAGE_URL >/dev/null 2>&1; then
            echo "Image already exists, skipping build"
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, will build"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Dependencies Image
        if: steps.check-image.outputs.image_exists == 'false'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ needs.check-petsc-version.outputs.dependencies_image }}:${{ needs.check-petsc-version.outputs.petsc_version }}
          platforms: linux/amd64
          build-args: |
            PETSC_VERSION=${{ needs.check-petsc-version.outputs.petsc_version }}
            CC=gcc-13
            CXX=g++-13

  build-and-test-tandem:
    needs: [check-petsc-version, build-dependencies-image]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        compiler:
          - cc: gcc-13
            cxx: g++-13
          - cc: clang-18
            cxx: clang++-18
        dimension: [2, 3]
        degree: [3]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull dependencies image
        run: |
          IMAGE=${{ needs.check-petsc-version.outputs.dependencies_image }}:${{ needs.check-petsc-version.outputs.petsc_version }}
          docker pull $IMAGE

      - name: Build and test
        run: |
          IMAGE=${{ needs.check-petsc-version.outputs.dependencies_image }}:${{ needs.check-petsc-version.outputs.petsc_version }}
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e CC=${{ matrix.compiler.cc }} \
            -e CXX=${{ matrix.compiler.cxx }} \
            --user tandem \
            $IMAGE \
            bash -c "
              set -e
              sudo update-alternatives --install /usr/bin/cc cc /usr/bin/\$CC 100
              sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/\$CXX 100

              mkdir -p build_${{ matrix.dimension }}d_p${{ matrix.degree }} && cd build_${{ matrix.dimension }}d_p${{ matrix.degree }}
              cmake .. -DCMAKE_PREFIX_PATH=/opt/petsc \
                      -DDOMAIN_DIMENSION=${{ matrix.dimension }} \
                      -DPOLYNOMIAL_DEGREE=${{ matrix.degree }} \
                      -DCMAKE_C_COMPILER=\$CC \
                      -DCMAKE_CXX_COMPILER=\$CXX
              make -j$(nproc)
              make test

              # Generate test outputs
              cd /app/examples/elasticity/${{ matrix.dimension }}d
              if [ '${{ matrix.dimension }}' = '2' ]; then
                gmsh -2 circular_hole.geo
                /app/build_2d_p3/app/static circular_hole.toml \
                  --resolution 0.8 \
                  --matrix_free yes \
                  --mg_strategy twolevel \
                  --mg_coarse_level 1 \
                  --output /app/test/regression/static_fault/output2D \
                  --petsc -options_file ../../options/mg_cheby.cfg
              else
                gmsh -3 spherical_hole.geo
                /app/build_3d_p3/app/static spherical_hole.toml \
                  --resolution 0.8 \
                  --matrix_free yes \
                  --mg_strategy twolevel \
                  --mg_coarse_level 1 \
                  --output /app/test/regression/static_fault/output3D \
                  --petsc -options_file ../../options/mg_cheby.cfg
              fi
            "

      - name: Static regression test
        run: |
          IMAGE=${{ needs.check-petsc-version.outputs.dependencies_image }}:${{ needs.check-petsc-version.outputs.petsc_version }}
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            --user tandem \
            $IMAGE \
            bash -c "
              cd /app/test/regression/static_fault
              if [ '${{ matrix.dimension }}' = '2' ]; then
                pytest test_regression_2D.py
              else
                pytest test_regression_3D.py
              fi
            "

      - name: Parallel consistency test
        run: |
          # TODO: Run with multiple processors to check for consistency
          echo "Parallel consistency test to be implemented"

      - name: SEAS regression test
        run: |
          # TODO: Check for cycle simulation e.g, BP1 with a-b >0 and a-b<0
          echo "SEAS regression test to be implemented"